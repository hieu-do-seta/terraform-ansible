name: App CI/CD (ECR + Bastion)

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Backend
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/arm64 \
            -f code/backend/Dockerfile \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:${{ github.sha }} \
            code/backend \
            --push

      - name: Build & Push Frontend
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -f code/frontend/Dockerfile \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ github.sha }} \
            code/frontend \
            --push

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Start SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_KEY }}

      - name: Set up SSH config
        run: |
          mkdir -p ~/.ssh
          cat > ~/.ssh/config <<EOF
          Host bastion
            HostName ${{ secrets.BASTION_IP }}
            User ubuntu
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no

          Host backend-server
            HostName ${{ secrets.BACKEND_PRIVATE_IP }}
            User ubuntu
            IdentityFile ~/.ssh/id_rsa
            ProxyJump bastion
            StrictHostKeyChecking no

          Host frontend-server
            HostName ${{ secrets.FRONTEND_IP }}
            User ubuntu
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config

      - name: Deploy Backend (via Bastion)
        run: |
          ssh backend-server << 'EOF'
            IMAGE=${{ github.sha }}
            REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin $REPO

            docker pull $REPO:$IMAGE
            docker stop backend || true
            docker rm backend || true
            docker run -d --name backend \
              --env-file /opt/myapp/.env \
              -p 3000:3000 \
              --restart unless-stopped \
              $REPO:$IMAGE
          EOF

      - name: Deploy Frontend (public)
        run: |
          ssh frontend-server << 'EOF'
            IMAGE=${{ github.sha }}
            REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin $REPO

            docker pull $REPO:$IMAGE
            docker stop frontend || true
            docker rm frontend || true
            docker run -d --name frontend \
              -p 8080:80 \
              --restart unless-stopped \
              $REPO:$IMAGE
          EOF
