name: App CI/CD (ECR + SSM + Debug)

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Backend Image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/arm64 \
            -f code/backend/Dockerfile \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:${{ github.sha }} \
            code/backend \
            --push

      - name: Build & Push Frontend Image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -f code/frontend/Dockerfile \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ github.sha }} \
            code/frontend \
            --push

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Backend (via SSM)
        run: |
          echo "üîß Starting backend deployment via SSM..."
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ secrets.BACKEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --comment "Deploy backend via SSM" \
            --parameters 'commands=[
              "set -euxo pipefail",
              "echo ENVIRONMENT DEBUG:",
              "uname -a",
              "which docker || echo docker not found",
              "which aws || echo aws CLI not found",
              "ls -l /opt/myapp/.env || echo .env file missing",
              "IMAGE=${{ github.sha }}",
              "REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend",
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $REPO",
              "docker pull $REPO:$IMAGE",
              "docker stop backend || true",
              "docker rm backend || true",
              "docker run -d --name backend --env-file /opt/myapp/.env -p 3000:3000 --restart unless-stopped $REPO:$IMAGE"
            ]' \
            --query "Command.CommandId" \
            --output text)

          echo "Command ID: $COMMAND_ID"
          echo "üïê Waiting for backend command to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.BACKEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}

          echo "üì¶ Fetching backend execution output..."
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.BACKEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}

      - name: Deploy Frontend (via SSM)
        run: |
          echo "üîß Starting frontend deployment via SSM..."
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ secrets.FRONTEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --comment "Deploy frontend via SSM" \
            --parameters 'commands=[
              "set -euxo pipefail",
              "IMAGE=${{ github.sha }}",
              "REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend",
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $REPO",
              "docker pull $REPO:$IMAGE",
              "docker stop frontend || true",
              "docker rm frontend || true",
              "docker run -d --name frontend -p 8080:80 --restart unless-stopped $REPO:$IMAGE"
            ]' \
            --query "Command.CommandId" \
            --output text)

          echo "Command ID: $COMMAND_ID"
          echo "üïê Waiting for frontend command to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.FRONTEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}

          echo "üì¶ Fetching frontend execution output..."
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.FRONTEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}
