name: App CI/CD (ECR + SSM + Debug - Dev)

on:
  push:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"

permissions:
  id-token: write     # Cho ph√©p s·ª≠ d·ª•ng OIDC ƒë·ªÉ assume IAM role
  contents: read

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}

    steps:
      - name: üßæ Checkout source code
        uses: actions/checkout@v3

      - name: üîê Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîë Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: üê≥ Build & Push Backend Image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/arm64 \
            -f code/backend/Dockerfile \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:${{ github.sha }} \
            code/backend \
            --push

      - name: üñºÔ∏è Build & Push Frontend Image
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -f code/frontend/Dockerfile \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ github.sha }} \
            code/frontend \
            --push

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: üßæ Checkout source code
        uses: actions/checkout@v3

      - name: üîê Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üß™ Check SSM instance connectivity
        run: |
          aws ssm describe-instance-information --region ${{ secrets.AWS_REGION }} || echo "[SSM DEBUG] failed"

      - name: üöÄ Deploy Backend via SSM
        run: |
          echo "üîß Starting backend deployment via SSM..."

          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ secrets.BACKEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --comment "Deploy backend via SSM" \
            --parameters 'commands=[
              "echo ===== Start Debug Session =====",
              "set -eux",
              "uname -a || echo uname failed",
              "echo Checking Docker...",
              "which docker || echo docker not found",
              "docker --version || echo docker version failed",
              "echo Checking AWS CLI...",
              "which aws || echo aws CLI not found",
              "aws --version || echo aws version failed",
              "echo Checking .env file...",
              "ls -l /opt/myapp/.env || echo .env file missing",
              "echo ==== Pulling Docker image ====",
              "IMAGE=${{ github.sha }}",
              "REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend",
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $REPO || echo login failed",
              "docker pull $REPO:$IMAGE || echo docker pull failed",
              "docker stop backend || echo no container to stop",
              "docker rm backend || echo no container to remove",
              "echo ==== Running backend container ====",
              "docker run -d --name backend --env-file /opt/myapp/.env -p 3000:3000 --restart unless-stopped $REPO:$IMAGE || echo docker run failed"
            ]' \
            --query "Command.CommandId" \
            --output text)

          echo "ü™™ Backend Command ID: $COMMAND_ID"
          echo "üïê Waiting for backend command to complete..."

          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.BACKEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}

          echo "üì¶ STDOUT (Backend Output):"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.BACKEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --query "StandardOutputContent" \
            --output text

          echo "‚ùå STDERR (Backend Errors):"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.BACKEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --query "StandardErrorContent" \
            --output text

      - name: üöÄ Deploy Frontend via SSM
        run: |
          echo "üîß Starting frontend deployment via SSM..."

          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ secrets.FRONTEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --comment "Deploy frontend via SSM" \
            --parameters 'commands=[
              "#!/bin/bash",
              "set -euxo pipefail",
              "IMAGE=${{ github.sha }}",
              "REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend",
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $REPO",
              "docker pull $REPO:$IMAGE",
              "docker stop frontend || true",
              "docker rm frontend || true",
              "docker run -d --name frontend -p 8080:80 --restart unless-stopped $REPO:$IMAGE"
            ]' \
            --query "Command.CommandId" \
            --output text)

          echo "ü™™ Frontend Command ID: $COMMAND_ID"
          echo "üïê Waiting for frontend command to complete..."

          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.FRONTEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}

          echo "üì¶ STDOUT (Frontend Output):"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.FRONTEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --query "StandardOutputContent" \
            --output text

          echo "‚ùå STDERR (Frontend Errors):"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.FRONTEND_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --query "StandardErrorContent" \
            --output text
